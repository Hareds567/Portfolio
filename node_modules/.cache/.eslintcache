[{"C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\index.tsx":"1","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\App.tsx":"2","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Header\\Header.tsx":"3","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Portfolio.tsx":"4","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Project\\Project.tsx":"5","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Icons\\Icons.tsx":"6"},{"size":403,"mtime":1622235109112,"results":"7","hashOfConfig":"8"},{"size":6430,"mtime":1622218803430,"results":"9","hashOfConfig":"8"},{"size":839,"mtime":1622235089990,"results":"10","hashOfConfig":"8"},{"size":2079,"mtime":1622240549246,"results":"11","hashOfConfig":"8"},{"size":615,"mtime":1622239916497,"results":"12","hashOfConfig":"8"},{"size":1031,"mtime":1622240901061,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"guanwn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\index.tsx",[],["29","30"],"C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\App.tsx",["31","32","33","34","35","36"],"import React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\n//Local Components\nimport Header from \"./Header/Header\";\nimport Portfolio from \"./Portfolio/Portfolio\";\n//Textures\nimport rockImage from \"./Textures/rockTexture.jpg\";\nimport rockHeightImage from \"./Textures/height.png\";\nimport alphaImage from \"./Textures/alpha.png\";\n//Styles\nimport \"./App.css\";\n\nconst App = () => {\n\tlet mouseY = 0;\n\tlet mouseX = 0;\n\t//Texture Loader\n\tconst loader = new THREE.TextureLoader();\n\tconst rockTexture = loader.load(rockImage);\n\tconst rockHeight = loader.load(rockHeightImage);\n\tconst rockAlpha = loader.load(alphaImage);\n\t//Window Information\n\tconst initialWidth = window.innerWidth;\n\tconst initialHeight = window.innerHeight;\n\n\t//Debug\n\tconst gridHelper = new THREE.GridHelper(window.innerWidth, 10);\n\n\t//let gui = useRef(new dat.GUI());\n\n\t//Three Initialization\n\tconst scene = new THREE.Scene();\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\tinitialWidth / initialHeight,\n\t\t0.1,\n\t\t150\n\t);\n\tcamera.position.z = 10;\n\tlet tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\n\n\tconst clock = new THREE.Clock();\n\tconst renderer = useRef(new THREE.WebGL1Renderer({ alpha: true }));\n\n\t//Add to Scene\n\t//scene.add(gridHelper);\n\n\tconst appDiv = useCallback(\n\t\t//Surround the canvas inside div\n\t\t(div: HTMLDivElement) => {\n\t\t\tif (div == null) return;\n\t\t\tconst canvas = document.getElementById(\"city-canvas\");\n\t\t\tconst guiDiv = document.getElementsByClassName(\"dg main a\");\n\t\t\tif (guiDiv.length > 1) {\n\t\t\t\tfor (var i: number = 0; i < guiDiv.length; i++) {\n\t\t\t\t\tif (i !== 1) guiDiv[i].remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvas?.remove();\n\t\t\t//guiDiv?.remove();\n\t\t\t//guiDivPlane?.remove();\n\n\t\t\trenderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\t\t\trenderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\t\t\tdiv.appendChild(renderer.current.domElement);\n\t\t},\n\t\t[renderer]\n\t);\n\t//========================\t\tOBJECTS\t(START)\t\t=========================\n\n\t//========= Cube\n\tconst cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\n\tconst cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n\t//scene.add(cube); //Add cube to the scene\n\t//Animation and Rendering  of the Cube\n\tconst animateCube = () => {\n\t\trequestAnimationFrame(animateCube);\n\t\tcube.rotation.x += 0.01;\n\t\tcube.rotation.y += 0.01;\n\t\trenderer.current.render(scene, camera);\n\t};\n\tanimateCube();\n\n\t//=========\tPlane\n\tconst xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\n\tconst xMaterial = new THREE.MeshStandardMaterial({\n\t\tcolor: \"white\",\n\t\tmap: rockTexture,\n\t\tdisplacementMap: rockHeight,\n\t\tdisplacementScale: 3.5,\n\t\talphaMap: rockAlpha,\n\t\ttransparent: true,\n\t\tdepthTest: false,\n\t});\n\tconst xMesh = new THREE.Mesh(xGeometry, xMaterial);\n\txMesh.rotation.x = 30;\n\txMesh.position.set(0, -2, 1);\n\tscene.add(xMesh);\n\t//gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n\tconst tick = () => {\n\t\tconst elapsedTime = clock.getElapsedTime();\n\t\txMesh.rotation.z = 0.08 * elapsedTime;\n\t\t//\txMesh.material.displacementScale = mouseY * 0.005;\n\t\twindow.requestAnimationFrame(tick);\n\t};\n\ttick();\n\n\t//=========\tSphere\n\tconst sphereGeometry = new THREE.TorusGeometry(6, 1.5, 15, 100);\n\tconst sphereMaterial = new THREE.PointsMaterial({\n\t\tsize: 0.00005,\n\t});\n\tconst sphere = new THREE.Points(sphereGeometry, sphereMaterial);\n\t//scene.add(sphere);\n\n\tconst sphereAnimation = () => {\n\t\tconst elapsedTime = clock.getElapsedTime();\n\t\tsphere.rotation.y = 0.3 * elapsedTime;\n\t\trenderer.current.render(scene, camera);\n\t\trequestAnimationFrame(sphereAnimation);\n\t};\n\t//sphereAnimation();\n\n\t//========= Particles\n\tconst particleGeometry = new THREE.BufferGeometry();\n\tconst particleMaterial = new THREE.PointsMaterial({\n\t\tsize: 0.00005,\n\t});\n\tconst particleNum = 9000;\n\tconst positionArray = new Float32Array(particleNum * 3);\n\tfor (let i = 0; i < positionArray.length - 1; i++) {\n\t\tpositionArray[i] = (Math.random() - 0.5) * 500;\n\t}\n\tparticleGeometry.setAttribute(\n\t\t\"position\",\n\t\tnew THREE.BufferAttribute(positionArray, 3)\n\t);\n\tconst particle = new THREE.Points(particleGeometry, particleMaterial);\n\tscene.add(particle);\n\n\tconst particleAnimation = () => {\n\t\tconst elapsedTime = clock.getElapsedTime();\n\t\tparticle.rotation.y = elapsedTime * mouseX * 0.00003;\n\t\trequestAnimationFrame(particleAnimation);\n\t};\n\tparticleAnimation();\n\t//========================\t\tOBJECTS\t(END)\t\t========================\n\n\t//========================\t\tLIGHTS (START)\t \t=========================\n\tconst firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\n\tfirstLight.position.set(-9.5, 3, 4);\n\tscene.add(firstLight);\n\tconst firstLightHelper = new THREE.PointLightHelper(firstLight);\n\tscene.add(firstLightHelper);\n\n\t//const color = { color: \"#00ff00\" };\n\t// gui.current.addColor(color, \"color\").onChange(() => {\n\t// \tfirstLight.color.set(color.color);\n\t// });\n\t// gui.current.add(firstLight.position, \"x\");\n\t// gui.current.add(firstLight.position, \"y\");\n\t// gui.current.add(firstLight.position, \"z\");\n\n\t//========================\t\tLIGHTS (END)\t\t\t========================\n\n\t//========================\t\tUSE EFFECT (START)\t \t========================\n\t//Update the dimensions of the Renderer\n\tconst updateWindowDimensions = () => {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.fov =\n\t\t\t(360 / Math.PI) *\n\t\t\tMath.atan(tanFOV * (window.innerHeight / initialHeight));\n\t\tcamera.updateProjectionMatrix();\n\t\tcamera.lookAt(scene.position);\n\t\trenderer.current.setSize(window.innerWidth, window.innerHeight);\n\t};\n\n\tconst animateTerrain = (event: MouseEvent) => {\n\t\tmouseY = event.clientY;\n\t\tmouseX = event.clientX;\n\t};\n\n\t//Update elements as the Size of Window changes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\n\t\twindow.addEventListener(\"mousemove\", animateTerrain);\n\t});\n\t//Initialize the Renderer\n\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<div className='App' ref={appDiv} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/Portfolio'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<Portfolio />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/About'>\n\t\t\t\t\t<Header />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/Contact-Information'>\n\t\t\t\t\t<Header />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n};\n\nexport default App;\n","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Header\\Header.tsx",["37"],"import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n//Styles\r\nimport \"./Header.css\";\r\ntype Navigation = {\r\n\tname: string;\r\n\tpath: string;\r\n};\r\n\r\nconst Header = () => {\r\n\tconst nav: Navigation[] = [\r\n\t\t{ name: \"Portfolio\", path: \"/Portfolio\" },\r\n\t\t{ name: \"About\", path: \"/About\" },\r\n\t\t{ name: \"Contact Me\", path: \"/Contact-Information\" },\r\n\t];\r\n\r\n\treturn (\r\n\t\t<div className='header'>\r\n\t\t\t<div className='home-page'>\r\n\t\t\t\t<NavLink to='/'>Justin Cabrera</NavLink>\r\n\t\t\t</div>\r\n\t\t\t<div className='navigation'>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{nav.map((element) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\t\t\tkey={element.name}\r\n\t\t\t\t\t\t\t\tto={element.path}\r\n\t\t\t\t\t\t\t\tstyle={{ color: \"white\" }}>\r\n\t\t\t\t\t\t\t\t<li>{element.name}</li>\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Portfolio.tsx",["38"],"C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Project\\Project.tsx",[],"C:\\Users\\justi\\Projects\\Portfolio\\portfolio\\src\\Portfolio\\Icons\\Icons.tsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":13,"nodeType":"45","messageId":"46","endLine":3,"endColumn":16},{"ruleId":"43","severity":1,"message":"47","line":4,"column":35,"nodeType":"45","messageId":"46","endLine":4,"endColumn":39},{"ruleId":"43","severity":1,"message":"48","line":29,"column":8,"nodeType":"45","messageId":"46","endLine":29,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":69,"column":3,"nodeType":"51","endLine":69,"endColumn":13,"suggestions":"52"},{"ruleId":"43","severity":1,"message":"53","line":124,"column":25,"nodeType":"45","messageId":"46","endLine":124,"endColumn":40},{"ruleId":"43","severity":1,"message":"54","line":183,"column":3,"nodeType":"45","messageId":"46","endLine":183,"endColumn":9},{"ruleId":"43","severity":1,"message":"47","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":14},{"ruleId":"43","severity":1,"message":"55","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":14},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-unused-vars","'dat' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'gridHelper' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'initialHeight' and 'initialWidth'. Either include them or remove the dependency array.","ArrayExpression",["58"],"'sphereAnimation' is assigned a value but never used.","'mouseY' is assigned a value but never used.","'type' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [initialHeight, initialWidth]",{"range":"61","text":"62"},[2022,2032],"[initialHeight, initialWidth]"]