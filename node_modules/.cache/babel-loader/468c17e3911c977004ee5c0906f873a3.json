{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\HomePage\\\\Body_1\\\\Container1.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\n//Textures\nimport rockImage from \"../../Textures/rockTexture.jpg\";\nimport rockHeightImage from \"../../Textures/height.png\";\nimport alphaImage from \"../../Textures/alpha.png\"; //CSS\n\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Container1 = ({\n  homePageIsRendered\n}) => {\n  _s();\n\n  let mouseY = 0;\n  let mouseX = 0; //Texture Loader\n\n  const loader = new THREE.TextureLoader();\n  const rockTexture = loader.load(rockImage);\n  const rockHeight = loader.load(rockHeightImage);\n  const rockAlpha = loader.load(alphaImage); //Window Information\n\n  const initialWidth = window.innerWidth;\n  const initialHeight = window.innerHeight; //Debug\n\n  const gridHelper = new THREE.GridHelper(window.innerWidth, 10); //let gui = useRef(new dat.GUI());\n  //Three Initialization\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, initialWidth / initialHeight, 0.1, 150);\n  camera.position.z = 10;\n  let tanFOV = Math.tan(Math.PI / 180 * camera.fov / 2);\n  const clock = new THREE.Clock();\n  const renderer = useRef(new THREE.WebGL1Renderer({\n    alpha: true\n  })); //Add to Scene\n  //scene.add(gridHelper);\n\n  const appDiv = useCallback( //Surround the canvas inside div\n  div => {\n    if (div == null) return;\n    const canvas = document.getElementById(\"city-canvas\");\n    const guiDiv = document.getElementsByClassName(\"dg main a\");\n\n    if (guiDiv.length > 1) {\n      for (var i = 0; i < guiDiv.length; i++) {\n        if (i !== 1) guiDiv[i].remove();\n      }\n    }\n\n    canvas === null || canvas === void 0 ? void 0 : canvas.remove(); //guiDiv?.remove();\n    //guiDivPlane?.remove();\n\n    renderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\n    renderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\n    div.appendChild(renderer.current.domElement);\n  }, [renderer]); //========================\t\tOBJECTS\t(START)\t\t=========================\n  //========= Cube\n\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); //Material\n\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n  //scene.add(cube); //Add cube to the scene\n  //Animation and Rendering  of the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.current.render(scene, camera);\n  };\n\n  animateCube(); //=========\tPlane\n\n  const xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\n  const xMaterial = new THREE.MeshStandardMaterial({\n    color: \"white\",\n    map: rockTexture,\n    displacementMap: rockHeight,\n    displacementScale: 3.5,\n    alphaMap: rockAlpha,\n    transparent: true,\n    depthTest: false\n  });\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\n  xMesh.rotation.x = 30;\n  xMesh.position.set(0, -2, 1); //scene.add(xMesh);\n  //gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n  const tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    xMesh.rotation.z = 0.08 * elapsedTime; //\txMesh.material.displacementScale = mouseY * 0.005;\n\n    window.requestAnimationFrame(tick);\n  };\n\n  tick(); //=========\tSphere\n\n  const sphereGeometry = new THREE.TorusGeometry(6, 1.5, 15, 100);\n  const sphereMaterial = new THREE.PointsMaterial({\n    size: 0.00005\n  });\n  const sphere = new THREE.Points(sphereGeometry, sphereMaterial); //scene.add(sphere);\n\n  const sphereAnimation = () => {\n    const elapsedTime = clock.getElapsedTime();\n    sphere.rotation.y = 0.3 * elapsedTime;\n    renderer.current.render(scene, camera);\n    requestAnimationFrame(sphereAnimation);\n  }; //sphereAnimation();\n  //========= Particles\n\n\n  const particleGeometry = new THREE.BufferGeometry();\n  const particleMaterial = new THREE.PointsMaterial({\n    size: 0.00005\n  });\n  const particleNum = 9000;\n  const positionArray = new Float32Array(particleNum * 3);\n\n  for (let i = 0; i < positionArray.length - 1; i++) {\n    positionArray[i] = (Math.random() - 0.5) * 500;\n  }\n\n  particleGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positionArray, 3));\n  const particle = new THREE.Points(particleGeometry, particleMaterial);\n  scene.add(particle);\n\n  const particleAnimation = () => {\n    const elapsedTime = clock.getElapsedTime();\n    particle.rotation.y = elapsedTime * 0.003; // particle.rotation.x = elapsedTime * 0.003;\n\n    particle.rotation.z = elapsedTime * 0.003;\n    requestAnimationFrame(particleAnimation);\n  };\n\n  particleAnimation(); //========================\t\tOBJECTS\t(END)\t\t========================\n  //========================\t\tLIGHTS (START)\t \t=========================\n\n  const firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\n  firstLight.position.set(-9.5, 3, 4);\n  scene.add(firstLight);\n  const firstLightHelper = new THREE.PointLightHelper(firstLight); //scene.add(firstLightHelper);\n  //const color = { color: \"#00ff00\" };\n  // gui.current.addColor(color, \"color\").onChange(() => {\n  // \tfirstLight.color.set(color.color);\n  // });\n  // gui.current.add(firstLight.position, \"x\");\n  // gui.current.add(firstLight.position, \"y\");\n  // gui.current.add(firstLight.position, \"z\");\n  //========================\t\tLIGHTS (END)\t\t\t========================\n  //========================\t\tUSE EFFECT (START)\t \t========================\n  //Update the dimensions of the Renderer\n\n  const updateWindowDimensions = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / initialHeight));\n    camera.updateProjectionMatrix();\n    camera.lookAt(scene.position);\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  const animateTerrain = event => {\n    mouseY = event.clientY;\n    mouseX = event.clientX;\n  }; //Update elements as the Size of Window changes\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    window.addEventListener(\"mousemove\", animateTerrain);\n  });\n  useEffect(() => {\n    console.log(`From first Animation: ${homePageIsRendered}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"homepage-container1\",\n      ref: appDiv,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${homePageIsRendered ? \"Welcome-message-wasRendered\" : \"Welcome-message\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hello, My name is Justin.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Welcome to my website!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container1, \"suGdXjIGUifpnZWTxF8wUHaQqN8=\");\n\n_c = Container1;\nexport default Container1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container1\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/HomePage/Body_1/Container1.tsx"],"names":["React","useEffect","useRef","useCallback","THREE","rockImage","rockHeightImage","alphaImage","Container1","homePageIsRendered","mouseY","mouseX","loader","TextureLoader","rockTexture","load","rockHeight","rockAlpha","initialWidth","window","innerWidth","initialHeight","innerHeight","gridHelper","GridHelper","scene","Scene","camera","PerspectiveCamera","position","z","tanFOV","Math","tan","PI","fov","clock","Clock","renderer","WebGL1Renderer","alpha","appDiv","div","canvas","document","getElementById","guiDiv","getElementsByClassName","length","i","remove","current","setSize","domElement","id","appendChild","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","animateCube","requestAnimationFrame","rotation","x","y","render","xGeometry","PlaneBufferGeometry","xMaterial","MeshStandardMaterial","map","displacementMap","displacementScale","alphaMap","transparent","depthTest","xMesh","set","tick","elapsedTime","getElapsedTime","sphereGeometry","TorusGeometry","sphereMaterial","PointsMaterial","size","sphere","Points","sphereAnimation","particleGeometry","BufferGeometry","particleMaterial","particleNum","positionArray","Float32Array","random","setAttribute","BufferAttribute","particle","add","particleAnimation","firstLight","PointLight","firstLightHelper","PointLightHelper","updateWindowDimensions","aspect","atan","updateProjectionMatrix","lookAt","animateTerrain","event","clientY","clientX","addEventListener","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback, useState, FC } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from \"dat.gui\";\r\n\r\n//Textures\r\nimport rockImage from \"../../Textures/rockTexture.jpg\";\r\nimport rockHeightImage from \"../../Textures/height.png\";\r\nimport alphaImage from \"../../Textures/alpha.png\";\r\n\r\n//CSS\r\nimport \"./styles.css\";\r\ninterface Props {\r\n  homePageIsRendered: boolean;\r\n}\r\nconst Container1: FC<Props> = ({ homePageIsRendered }) => {\r\n  let mouseY = 0;\r\n  let mouseX = 0;\r\n  //Texture Loader\r\n  const loader = new THREE.TextureLoader();\r\n  const rockTexture = loader.load(rockImage);\r\n  const rockHeight = loader.load(rockHeightImage);\r\n  const rockAlpha = loader.load(alphaImage);\r\n  //Window Information\r\n  const initialWidth = window.innerWidth;\r\n  const initialHeight = window.innerHeight;\r\n\r\n  //Debug\r\n  const gridHelper = new THREE.GridHelper(window.innerWidth, 10);\r\n\r\n  //let gui = useRef(new dat.GUI());\r\n\r\n  //Three Initialization\r\n  const scene = new THREE.Scene();\r\n  const camera = new THREE.PerspectiveCamera(\r\n    90,\r\n    initialWidth / initialHeight,\r\n    0.1,\r\n    150\r\n  );\r\n  camera.position.z = 10;\r\n  let tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\r\n\r\n  const clock = new THREE.Clock();\r\n  const renderer = useRef(new THREE.WebGL1Renderer({ alpha: true }));\r\n\r\n  //Add to Scene\r\n  //scene.add(gridHelper);\r\n\r\n  const appDiv = useCallback(\r\n    //Surround the canvas inside div\r\n    (div: HTMLDivElement) => {\r\n      if (div == null) return;\r\n      const canvas = document.getElementById(\"city-canvas\");\r\n      const guiDiv = document.getElementsByClassName(\"dg main a\");\r\n      if (guiDiv.length > 1) {\r\n        for (var i: number = 0; i < guiDiv.length; i++) {\r\n          if (i !== 1) guiDiv[i].remove();\r\n        }\r\n      }\r\n      canvas?.remove();\r\n      //guiDiv?.remove();\r\n      //guiDivPlane?.remove();\r\n\r\n      renderer.current.setSize(initialWidth, initialHeight); //Build Renderers\r\n      renderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\r\n      div.appendChild(renderer.current.domElement);\r\n    },\r\n    [renderer]\r\n  );\r\n  //========================\t\tOBJECTS\t(START)\t\t=========================\r\n\r\n  //========= Cube\r\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\r\n  const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\r\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\r\n  //scene.add(cube); //Add cube to the scene\r\n  //Animation and Rendering  of the Cube\r\n  const animateCube = () => {\r\n    requestAnimationFrame(animateCube);\r\n    cube.rotation.x += 0.01;\r\n    cube.rotation.y += 0.01;\r\n    renderer.current.render(scene, camera);\r\n  };\r\n  animateCube();\r\n\r\n  //=========\tPlane\r\n  const xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\r\n  const xMaterial = new THREE.MeshStandardMaterial({\r\n    color: \"white\",\r\n    map: rockTexture,\r\n    displacementMap: rockHeight,\r\n    displacementScale: 3.5,\r\n    alphaMap: rockAlpha,\r\n    transparent: true,\r\n    depthTest: false,\r\n  });\r\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\r\n  xMesh.rotation.x = 30;\r\n  xMesh.position.set(0, -2, 1);\r\n  //scene.add(xMesh);\r\n  //gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\r\n\r\n  const tick = () => {\r\n    const elapsedTime = clock.getElapsedTime();\r\n    xMesh.rotation.z = 0.08 * elapsedTime;\r\n    //\txMesh.material.displacementScale = mouseY * 0.005;\r\n    window.requestAnimationFrame(tick);\r\n  };\r\n  tick();\r\n\r\n  //=========\tSphere\r\n  const sphereGeometry = new THREE.TorusGeometry(6, 1.5, 15, 100);\r\n  const sphereMaterial = new THREE.PointsMaterial({\r\n    size: 0.00005,\r\n  });\r\n  const sphere = new THREE.Points(sphereGeometry, sphereMaterial);\r\n  //scene.add(sphere);\r\n\r\n  const sphereAnimation = () => {\r\n    const elapsedTime = clock.getElapsedTime();\r\n    sphere.rotation.y = 0.3 * elapsedTime;\r\n    renderer.current.render(scene, camera);\r\n    requestAnimationFrame(sphereAnimation);\r\n  };\r\n  //sphereAnimation();\r\n\r\n  //========= Particles\r\n  const particleGeometry = new THREE.BufferGeometry();\r\n  const particleMaterial = new THREE.PointsMaterial({\r\n    size: 0.00005,\r\n  });\r\n  const particleNum = 9000;\r\n  const positionArray = new Float32Array(particleNum * 3);\r\n  for (let i = 0; i < positionArray.length - 1; i++) {\r\n    positionArray[i] = (Math.random() - 0.5) * 500;\r\n  }\r\n  particleGeometry.setAttribute(\r\n    \"position\",\r\n    new THREE.BufferAttribute(positionArray, 3)\r\n  );\r\n  const particle = new THREE.Points(particleGeometry, particleMaterial);\r\n  scene.add(particle);\r\n\r\n  const particleAnimation = () => {\r\n    const elapsedTime = clock.getElapsedTime();\r\n    particle.rotation.y = elapsedTime * 0.003;\r\n    // particle.rotation.x = elapsedTime * 0.003;\r\n    particle.rotation.z = elapsedTime * 0.003;\r\n    requestAnimationFrame(particleAnimation);\r\n  };\r\n  particleAnimation();\r\n  //========================\t\tOBJECTS\t(END)\t\t========================\r\n\r\n  //========================\t\tLIGHTS (START)\t \t=========================\r\n  const firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\r\n  firstLight.position.set(-9.5, 3, 4);\r\n  scene.add(firstLight);\r\n  const firstLightHelper = new THREE.PointLightHelper(firstLight);\r\n  //scene.add(firstLightHelper);\r\n\r\n  //const color = { color: \"#00ff00\" };\r\n  // gui.current.addColor(color, \"color\").onChange(() => {\r\n  // \tfirstLight.color.set(color.color);\r\n  // });\r\n  // gui.current.add(firstLight.position, \"x\");\r\n  // gui.current.add(firstLight.position, \"y\");\r\n  // gui.current.add(firstLight.position, \"z\");\r\n\r\n  //========================\t\tLIGHTS (END)\t\t\t========================\r\n\r\n  //========================\t\tUSE EFFECT (START)\t \t========================\r\n  //Update the dimensions of the Renderer\r\n  const updateWindowDimensions = () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.fov =\r\n      (360 / Math.PI) *\r\n      Math.atan(tanFOV * (window.innerHeight / initialHeight));\r\n    camera.updateProjectionMatrix();\r\n    camera.lookAt(scene.position);\r\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\r\n  };\r\n\r\n  const animateTerrain = (event: MouseEvent) => {\r\n    mouseY = event.clientY;\r\n    mouseX = event.clientX;\r\n  };\r\n\r\n  //Update elements as the Size of Window changes\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateWindowDimensions);\r\n    window.addEventListener(\"mousemove\", animateTerrain);\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(`From first Animation: ${homePageIsRendered}`);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"homepage-container1\" ref={appDiv}>\r\n        {/* <Header /> */}\r\n        <div\r\n          className={`${\r\n            homePageIsRendered\r\n              ? \"Welcome-message-wasRendered\"\r\n              : \"Welcome-message\"\r\n          }`}\r\n        >\r\n          <h1>Hello, My name is Justin.</h1>\r\n          <p>Welcome to my website!</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container1;\r\n"]},"metadata":{},"sourceType":"module"}