{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const width = useRef(window.innerWidth);\n  const height = useRef(window.innerHeight);\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, width.current / height.current, 0.1, 1000);\n  const renderer = new THREE.WebGL1Renderer(); //Cube\n\n  const geometry = new THREE.BoxGeometry(2, 2, 2);\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  scene.add(cube);\n  camera.position.z = 5; //Animation and Rendering the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.render(scene, camera);\n  }; //Update the dimensions of the Renderer\n\n\n  const updateWindowDimensions = () => {\n    width.current = window.innerWidth;\n    height.current = window.innerHeight;\n    renderer.setSize(width.current, height.current);\n  };\n\n  animateCube(); //Update Size of Window\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n  }); //Initialize the Renderer\n\n  useEffect(() => {\n    renderer.setSize(width.current, height.current);\n    document.body.appendChild(renderer.domElement);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"fasdfasdfasfd\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"FFnsBQMV3VSJrs2RmSrDa/or2bQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/App.tsx"],"names":["React","useEffect","useRef","THREE","App","width","window","innerWidth","height","innerHeight","scene","Scene","camera","PerspectiveCamera","current","renderer","WebGL1Renderer","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animateCube","requestAnimationFrame","rotation","x","y","render","updateWindowDimensions","setSize","addEventListener","document","body","appendChild","domElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,WAAP;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACjB,QAAMC,KAAK,GAAGH,MAAM,CAACI,MAAM,CAACC,UAAR,CAApB;AACA,QAAMC,MAAM,GAAGN,MAAM,CAACI,MAAM,CAACG,WAAR,CAArB;AAEA,QAAMC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAd;AACA,QAAMC,MAAM,GAAG,IAAIT,KAAK,CAACU,iBAAV,CACd,EADc,EAEdR,KAAK,CAACS,OAAN,GAAgBN,MAAM,CAACM,OAFT,EAGd,GAHc,EAId,IAJc,CAAf;AAMA,QAAMC,QAAQ,GAAG,IAAIZ,KAAK,CAACa,cAAV,EAAjB,CAXiB,CAYjB;;AACA,QAAMC,QAAQ,GAAG,IAAId,KAAK,CAACe,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAjB;AACA,QAAMC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,iBAAV,CAA4B;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAA5B,CAAjB;AACA,QAAMC,IAAI,GAAG,IAAInB,KAAK,CAACoB,IAAV,CAAeN,QAAf,EAAyBE,QAAzB,CAAb;AAEAT,EAAAA,KAAK,CAACc,GAAN,CAAUF,IAAV;AACAV,EAAAA,MAAM,CAACa,QAAP,CAAgBC,CAAhB,GAAoB,CAApB,CAlBiB,CAmBjB;;AACA,QAAMC,WAAW,GAAG,MAAM;AACzBC,IAAAA,qBAAqB,CAACD,WAAD,CAArB;AACAL,IAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,IAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAhB,IAAAA,QAAQ,CAACiB,MAAT,CAAgBtB,KAAhB,EAAuBE,MAAvB;AACA,GALD,CApBiB,CA2BjB;;;AACA,QAAMqB,sBAAsB,GAAG,MAAM;AACpC5B,IAAAA,KAAK,CAACS,OAAN,GAAgBR,MAAM,CAACC,UAAvB;AACAC,IAAAA,MAAM,CAACM,OAAP,GAAiBR,MAAM,CAACG,WAAxB;AACAM,IAAAA,QAAQ,CAACmB,OAAT,CAAiB7B,KAAK,CAACS,OAAvB,EAAgCN,MAAM,CAACM,OAAvC;AACA,GAJD;;AAMAa,EAAAA,WAAW,GAlCM,CAmCjB;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,MAAM,CAAC6B,gBAAP,CAAwB,QAAxB,EAAkCF,sBAAlC;AACA,GAFQ,CAAT,CApCiB,CAuCjB;;AACAhC,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,QAAQ,CAACmB,OAAT,CAAiB7B,KAAK,CAACS,OAAvB,EAAgCN,MAAM,CAACM,OAAvC;AACAsB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BvB,QAAQ,CAACwB,UAAnC;AACA,GAHQ,EAGN,EAHM,CAAT;AAKA,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,CA9CD;;GAAMnC,G;;KAAAA,G;AAgDN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nimport \"./App.css\";\n\nconst App = () => {\n\tconst width = useRef(window.innerWidth);\n\tconst height = useRef(window.innerHeight);\n\n\tconst scene = new THREE.Scene();\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\twidth.current / height.current,\n\t\t0.1,\n\t\t1000\n\t);\n\tconst renderer = new THREE.WebGL1Renderer();\n\t//Cube\n\tconst geometry = new THREE.BoxGeometry(2, 2, 2);\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n\tconst cube = new THREE.Mesh(geometry, material);\n\n\tscene.add(cube);\n\tcamera.position.z = 5;\n\t//Animation and Rendering the Cube\n\tconst animateCube = () => {\n\t\trequestAnimationFrame(animateCube);\n\t\tcube.rotation.x += 0.01;\n\t\tcube.rotation.y += 0.01;\n\t\trenderer.render(scene, camera);\n\t};\n\n\t//Update the dimensions of the Renderer\n\tconst updateWindowDimensions = () => {\n\t\twidth.current = window.innerWidth;\n\t\theight.current = window.innerHeight;\n\t\trenderer.setSize(width.current, height.current);\n\t};\n\n\tanimateCube();\n\t//Update Size of Window\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\n\t});\n\t//Initialize the Renderer\n\tuseEffect(() => {\n\t\trenderer.setSize(width.current, height.current);\n\t\tdocument.body.appendChild(renderer.domElement);\n\t}, []);\n\n\treturn <div className='App'>fasdfasdfasfd</div>;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}