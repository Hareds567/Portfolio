{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\HomePage\\\\Body_3\\\\Container3.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Node } from \"./Pathfinder\";\nimport Element from \"./Node\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 0;\nconst START_NODE_COLUMN = 0;\nconst END_NODE_ROW = 9;\nconst END_NODE_COLUMN = 14;\nconst open_set = new Array();\nconst closed_set = [];\n\nconst Container3 = () => {\n  _s();\n\n  const [grid, set_grid] = useState(new Array());\n\n  const createGrid = () => {\n    const grid = [];\n\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n\n      for (let column = 0; column < 15; column++) {\n        const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\n        const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\n        const isWall = false;\n        const node = new Node(row, column, isStart, isFinish, isWall);\n        currentRow.push(node);\n      }\n\n      grid.push(currentRow);\n      open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\n    }\n\n    addNeighbours();\n    return grid;\n  };\n\n  const algorithm = () => {\n    while (open_set.length > 0) {\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN];\n      let lowestIndex = 0; //CHeck for the lowest \"F\" value\n\n      for (let i = 0; i < open_set.length; i++) {\n        if (open_set[i].f < open_set[lowestIndex].f) {\n          lowestIndex = i;\n        }\n      }\n\n      let current = open_set[lowestIndex];\n\n      if (current === end) {\n        console.log(\"done\");\n        return;\n      }\n\n      closed_set.push(current); // Add current to the closed list\n\n      remove_from_array(open_set, current); // Remove current from Open Set\n    }\n  };\n\n  const addNeighbours = () => {\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid.length; col++) {\n        grid[row][col].createNeighbours(grid);\n      }\n    }\n  };\n\n  useEffect(() => {\n    set_grid(createGrid()); // addNeighbours();\n  }, []); //   useEffect(() => {\n  //     console.log(grid);\n  //   }, [grid]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: grid.map(node => {\n        return node.map(node => {\n          return /*#__PURE__*/_jsxDEV(Element, {\n            node: node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 20\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container3, \"9cEA2nTZNMH8EZ8HtvnH9D66Uzc=\");\n\n_c = Container3;\n\nconst remove_from_array = (arr, item) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] == item) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\nexport default Container3;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container3\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/HomePage/Body_3/Container3.tsx"],"names":["React","useEffect","useState","Node","Element","START_NODE_ROW","START_NODE_COLUMN","END_NODE_ROW","END_NODE_COLUMN","open_set","Array","closed_set","Container3","grid","set_grid","createGrid","row","currentRow","column","isStart","isFinish","isWall","node","push","addNeighbours","algorithm","length","end","lowestIndex","i","f","current","console","log","remove_from_array","col","createNeighbours","map","arr","item","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Node } from \"./Pathfinder\";\r\nimport Element from \"./Node\";\r\nimport \"./styles.css\";\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COLUMN = 0;\r\n\r\nconst END_NODE_ROW = 9;\r\nconst END_NODE_COLUMN = 14;\r\n\r\nconst open_set = new Array<Node>();\r\nconst closed_set = [];\r\n\r\nconst Container3 = () => {\r\n  const [grid, set_grid] = useState(new Array<Node[]>());\r\n\r\n  const createGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 10; row++) {\r\n      const currentRow = [];\r\n      for (let column = 0; column < 15; column++) {\r\n        const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\r\n        const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\r\n        const isWall = false;\r\n        const node = new Node(row, column, isStart, isFinish, isWall);\r\n        currentRow.push(node);\r\n      }\r\n      grid.push(currentRow);\r\n      open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\r\n    }\r\n    addNeighbours();\r\n    return grid;\r\n  };\r\n\r\n  const algorithm = () => {\r\n    while (open_set.length > 0) {\r\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN];\r\n      let lowestIndex = 0;\r\n      //CHeck for the lowest \"F\" value\r\n      for (let i = 0; i < open_set.length; i++) {\r\n        if (open_set[i].f < open_set[lowestIndex].f) {\r\n          lowestIndex = i;\r\n        }\r\n      }\r\n\r\n      let current = open_set[lowestIndex];\r\n      if (current === end) {\r\n        console.log(\"done\");\r\n        return;\r\n      }\r\n      closed_set.push(current); // Add current to the closed list\r\n      remove_from_array(open_set, current); // Remove current from Open Set\r\n    }\r\n  };\r\n\r\n  const addNeighbours = () => {\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid.length; col++) {\r\n        grid[row][col].createNeighbours(grid);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    set_grid(createGrid());\r\n    // addNeighbours();\r\n  }, []);\r\n\r\n  //   useEffect(() => {\r\n  //     console.log(grid);\r\n  //   }, [grid]);\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"Grid\">\r\n        {grid.map((node) => {\r\n          return node.map((node) => {\r\n            return <Element node={node} />;\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst remove_from_array = (arr: Array<Node>, item: Node) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    if (arr[i] == item) {\r\n      arr.splice(i, 1);\r\n    }\r\n  }\r\n};\r\nexport default Container3;\r\n"]},"metadata":{},"sourceType":"module"}