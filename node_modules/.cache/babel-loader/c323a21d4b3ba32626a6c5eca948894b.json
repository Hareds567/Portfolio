{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\HomePage\\\\Body_3\\\\Container3.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Node } from \"./Pathfinder\";\nimport Element from \"./Node\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 0;\nconst START_NODE_COLUMN = 0;\nconst END_NODE_ROW = 9;\nconst END_NODE_COLUMN = 14;\nconst open_set = new Array();\nconst closed_set = [];\n\nconst Container3 = () => {\n  _s();\n\n  const [grid, set_grid] = useState(new Array());\n\n  const algorithm = () => {\n    while (open_set.length > 0) {\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN];\n      let lowestIndex = 0;\n\n      for (let i = 0; i < open_set.length; i++) {\n        if (open_set[i].f < open_set[lowestIndex].f) {\n          lowestIndex = i;\n        }\n      }\n\n      let current = open_set[lowestIndex];\n\n      if (current === end) {\n        console.log(\"done\");\n        return;\n      }\n\n      closed_set.push(current);\n    }\n  };\n\n  useEffect(() => {\n    set_grid(createGrid());\n  }, []);\n  useEffect(() => {\n    console.log(grid);\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: grid.map(node => {\n        return node.map(node => {\n          return /*#__PURE__*/_jsxDEV(Element, {\n            node: node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 20\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container3, \"QnH9nO3V1NRdCVCoG8zSYhCoxRE=\");\n\n_c = Container3;\n\nconst createGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 10; row++) {\n    const currentRow = [];\n\n    for (let column = 0; column < 15; column++) {\n      const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\n      const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\n      const isWall = false;\n      const node = new Node(row, column, isStart, isFinish, isWall);\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n    open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\n  }\n\n  return grid;\n};\n\nexport default Container3;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container3\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/HomePage/Body_3/Container3.tsx"],"names":["React","useEffect","useState","Node","Element","START_NODE_ROW","START_NODE_COLUMN","END_NODE_ROW","END_NODE_COLUMN","open_set","Array","closed_set","Container3","grid","set_grid","algorithm","length","end","lowestIndex","i","f","current","console","log","push","createGrid","map","node","row","currentRow","column","isStart","isFinish","isWall"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Node } from \"./Pathfinder\";\r\nimport Element from \"./Node\";\r\nimport \"./styles.css\";\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COLUMN = 0;\r\n\r\nconst END_NODE_ROW = 9;\r\nconst END_NODE_COLUMN = 14;\r\n\r\nconst open_set = new Array<Node>();\r\nconst closed_set = [];\r\n\r\nconst Container3 = () => {\r\n  const [grid, set_grid] = useState(new Array<Node[]>());\r\n\r\n  const algorithm = () => {\r\n    while (open_set.length > 0) {\r\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN];\r\n      let lowestIndex = 0;\r\n      for (let i = 0; i < open_set.length; i++) {\r\n        if (open_set[i].f < open_set[lowestIndex].f) {\r\n          lowestIndex = i;\r\n        }\r\n      }\r\n      let current = open_set[lowestIndex];\r\n      if (current === end) {\r\n        console.log(\"done\");\r\n        return;\r\n      }\r\n      closed_set.push(current);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    set_grid(createGrid());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(grid);\r\n  }, [grid]);\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"Grid\">\r\n        {grid.map((node) => {\r\n          return node.map((node) => {\r\n            return <Element node={node} />;\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst createGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 10; row++) {\r\n    const currentRow = [];\r\n    for (let column = 0; column < 15; column++) {\r\n      const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\r\n      const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\r\n      const isWall = false;\r\n      const node = new Node(row, column, isStart, isFinish, isWall);\r\n      currentRow.push(node);\r\n    }\r\n    grid.push(currentRow);\r\n    open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport default Container3;\r\n"]},"metadata":{},"sourceType":"module"}