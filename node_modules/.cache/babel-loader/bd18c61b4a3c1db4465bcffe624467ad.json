{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\HomePage\\\\Body_3\\\\Container3.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Node } from \"./Pathfinder\";\nimport Element from \"./Node\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 0;\nconst START_NODE_COLUMN = 0;\nconst END_NODE_ROW = 9;\nconst END_NODE_COLUMN = 14;\nconst open_set = new Array();\nconst closed_set = new Array();\n\nconst Container3 = () => {\n  _s();\n\n  const [grid, set_grid] = useState(new Array());\n\n  const heuristics = (a, b) => {\n    const h = Math.abs(a.row - b.row) - Math.abs(a.column - b.column);\n    return h;\n  };\n\n  const algorithm = () => {\n    while (open_set.length > 0) {\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN]; // End result\n\n      let lowestIndex = 0; //Check for the lowest \"F\" value\n\n      for (let i = 0; i < open_set.length; i++) {\n        if (open_set[i].f < open_set[lowestIndex].f) {\n          lowestIndex = i;\n        }\n      }\n\n      let current = open_set[lowestIndex];\n\n      if (current === end) {\n        console.log(\"done\");\n        return;\n      }\n\n      closed_set.push(current); // Add current to the closed list\n\n      remove_from_array(open_set, current); // Remove current from Open Set\n\n      for (let i = 0; i < current.Neighbors.length; i++) {\n        const neighbor = current.Neighbors[i];\n\n        if (!closed_set.includes(neighbor)) {\n          var tempG = neighbor.g + 1;\n\n          if (open_set.includes(neighbor)) {\n            if (tempG < neighbor.g) {\n              neighbor.g = tempG;\n            }\n          } else {\n            neighbor.g = tempG;\n            open_set.push(neighbor);\n          }\n\n          neighbor.h = heuristics(neighbor, end);\n          neighbor.f = neighbor.g + neighbor.h;\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    set_grid(createGrid()); // addNeighbours();\n  }, []);\n  useEffect(() => {\n    console.log(grid);\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grid\",\n      children: grid.map(node => {\n        return node.map(node => {\n          return /*#__PURE__*/_jsxDEV(Element, {\n            node: node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 20\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Container3, \"QnH9nO3V1NRdCVCoG8zSYhCoxRE=\");\n\n_c = Container3;\n\nconst createGrid = () => {\n  const grid = [];\n  const x = 10;\n  const y = 15;\n\n  for (let row = 0; row < x; row++) {\n    const currentRow = [];\n\n    for (let column = 0; column < y; column++) {\n      const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\n      const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\n      const isWall = false;\n      const node = new Node(row, column, isStart, isFinish, isWall);\n      currentRow.push(node);\n    }\n\n    grid.push(currentRow);\n    open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\n  }\n\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid.length; col++) {\n      grid[row][col].createNeighbours(grid, x, y);\n    }\n  }\n\n  return grid;\n};\n\nconst remove_from_array = (arr, item) => {\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] == item) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\nexport default Container3;\n\nvar _c;\n\n$RefreshReg$(_c, \"Container3\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/HomePage/Body_3/Container3.tsx"],"names":["React","useEffect","useState","Node","Element","START_NODE_ROW","START_NODE_COLUMN","END_NODE_ROW","END_NODE_COLUMN","open_set","Array","closed_set","Container3","grid","set_grid","heuristics","a","b","h","Math","abs","row","column","algorithm","length","end","lowestIndex","i","f","current","console","log","push","remove_from_array","Neighbors","neighbor","includes","tempG","g","createGrid","map","node","x","y","currentRow","isStart","isFinish","isWall","col","createNeighbours","arr","item","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Node } from \"./Pathfinder\";\r\nimport Element from \"./Node\";\r\nimport \"./styles.css\";\r\n\r\nconst START_NODE_ROW = 0;\r\nconst START_NODE_COLUMN = 0;\r\n\r\nconst END_NODE_ROW = 9;\r\nconst END_NODE_COLUMN = 14;\r\n\r\nconst open_set = new Array<Node>();\r\nconst closed_set = new Array<Node>();\r\n\r\nconst Container3 = () => {\r\n  const [grid, set_grid] = useState(new Array<Node[]>());\r\n\r\n  const heuristics = (a: Node, b: Node) => {\r\n    const h = Math.abs(a.row - b.row) - Math.abs(a.column - b.column);\r\n    return h;\r\n  };\r\n\r\n  const algorithm = () => {\r\n    while (open_set.length > 0) {\r\n      const end = grid[END_NODE_ROW][END_NODE_COLUMN]; // End result\r\n      let lowestIndex = 0;\r\n\r\n      //Check for the lowest \"F\" value\r\n      for (let i = 0; i < open_set.length; i++) {\r\n        if (open_set[i].f < open_set[lowestIndex].f) {\r\n          lowestIndex = i;\r\n        }\r\n      }\r\n\r\n      let current = open_set[lowestIndex];\r\n      if (current === end) {\r\n        console.log(\"done\");\r\n        return;\r\n      }\r\n\r\n      closed_set.push(current); // Add current to the closed list\r\n      remove_from_array(open_set, current); // Remove current from Open Set\r\n\r\n      for (let i = 0; i < current.Neighbors.length; i++) {\r\n        const neighbor = current.Neighbors[i];\r\n        if (!closed_set.includes(neighbor)) {\r\n          var tempG = neighbor.g + 1;\r\n          if (open_set.includes(neighbor)) {\r\n            if (tempG < neighbor.g) {\r\n              neighbor.g = tempG;\r\n            }\r\n          } else {\r\n            neighbor.g = tempG;\r\n            open_set.push(neighbor);\r\n          }\r\n\r\n          neighbor.h = heuristics(neighbor, end);\r\n          neighbor.f = neighbor.g + neighbor.h;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    set_grid(createGrid());\r\n    // addNeighbours();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(grid);\r\n  }, [grid]);\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"Grid\">\r\n        {grid.map((node) => {\r\n          return node.map((node) => {\r\n            return <Element node={node} />;\r\n          });\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst createGrid = () => {\r\n  const grid = [];\r\n  const x = 10;\r\n  const y = 15;\r\n  for (let row = 0; row < x; row++) {\r\n    const currentRow = [];\r\n    for (let column = 0; column < y; column++) {\r\n      const isStart = row === START_NODE_ROW && column === START_NODE_COLUMN;\r\n      const isFinish = row === END_NODE_ROW && column === END_NODE_COLUMN;\r\n      const isWall = false;\r\n      const node = new Node(row, column, isStart, isFinish, isWall);\r\n      currentRow.push(node);\r\n    }\r\n    grid.push(currentRow);\r\n    open_set.push(grid[START_NODE_ROW][START_NODE_COLUMN]);\r\n  }\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid.length; col++) {\r\n      grid[row][col].createNeighbours(grid, x, y);\r\n    }\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nconst remove_from_array = (arr: Array<Node>, item: Node) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    if (arr[i] == item) {\r\n      arr.splice(i, 1);\r\n    }\r\n  }\r\n};\r\nexport default Container3;\r\n"]},"metadata":{},"sourceType":"module"}