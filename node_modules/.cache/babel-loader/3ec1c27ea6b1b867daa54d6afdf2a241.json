{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"; //Local Components\n\nimport Header from \"./Header/Header\";\nimport Portfolio from \"./Portfolio/Portfolio\"; //Textures\n\nimport rockImage from \"./Textures/rockTexture.jpg\";\nimport rockHeightImage from \"./Textures/height.png\";\nimport alphaImage from \"./Textures/alpha.png\"; //Styles\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  let mouseY = 0;\n  let mouseX = 0; //Texture Loader\n\n  const loader = new THREE.TextureLoader();\n  const rockTexture = loader.load(rockImage);\n  const rockHeight = loader.load(rockHeightImage);\n  const rockAlpha = loader.load(alphaImage); //Window Information\n\n  const initialWidth = window.innerWidth;\n  const initialHeight = window.innerHeight; //Debug\n\n  const gridHelper = new THREE.GridHelper(window.innerWidth, 10); //let gui = useRef(new dat.GUI());\n  //Three Initialization\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, initialWidth / initialHeight, 0.1, 150);\n  camera.position.z = 10;\n  let tanFOV = Math.tan(Math.PI / 180 * camera.fov / 2);\n  const clock = new THREE.Clock();\n  const renderer = useRef(new THREE.WebGL1Renderer({\n    alpha: true\n  })); //Add to Scene\n  //scene.add(gridHelper);\n\n  const appDiv = useCallback( //Surround the canvas inside div\n  div => {\n    if (div == null) return;\n    const canvas = document.getElementById(\"city-canvas\");\n    const guiDiv = document.getElementsByClassName(\"dg main a\");\n\n    if (guiDiv.length > 1) {\n      for (var i = 0; i < guiDiv.length; i++) {\n        if (i !== 1) guiDiv[i].remove();\n      }\n    }\n\n    canvas === null || canvas === void 0 ? void 0 : canvas.remove(); //guiDiv?.remove();\n    //guiDivPlane?.remove();\n\n    renderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\n    renderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\n    div.appendChild(renderer.current.domElement);\n  }, [renderer]); //========================\t\tOBJECTS\t(START)\t\t=========================\n  //========= Cube\n\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); //Material\n\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n  //scene.add(cube); //Add cube to the scene\n  //Animation and Rendering  of the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.current.render(scene, camera);\n  };\n\n  animateCube(); //=========\tPlane\n\n  const xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\n  const xMaterial = new THREE.MeshStandardMaterial({\n    color: \"white\",\n    map: rockTexture,\n    displacementMap: rockHeight,\n    displacementScale: 3.5,\n    alphaMap: rockAlpha,\n    transparent: true,\n    depthTest: false\n  });\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\n  xMesh.rotation.x = 30;\n  xMesh.position.set(0, -2, 1); //scene.add(xMesh);\n  //gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n  const tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    xMesh.rotation.z = 0.08 * elapsedTime; //\txMesh.material.displacementScale = mouseY * 0.005;\n\n    window.requestAnimationFrame(tick);\n  };\n\n  tick(); //=========\tSphere\n\n  const sphereGeometry = new THREE.TorusGeometry(6, 1.5, 15, 100);\n  const sphereMaterial = new THREE.PointsMaterial({\n    size: 0.00005\n  });\n  const sphere = new THREE.Points(sphereGeometry, sphereMaterial); //scene.add(sphere);\n\n  const sphereAnimation = () => {\n    const elapsedTime = clock.getElapsedTime();\n    sphere.rotation.y = 0.3 * elapsedTime;\n    renderer.current.render(scene, camera);\n    requestAnimationFrame(sphereAnimation);\n  }; //sphereAnimation();\n  //========= Particles\n\n\n  const particleGeometry = new THREE.BufferGeometry();\n  const particleMaterial = new THREE.PointsMaterial({\n    size: 0.00005\n  });\n  const particleNum = 9000;\n  const positionArray = new Float32Array(particleNum * 3);\n\n  for (let i = 0; i < positionArray.length - 1; i++) {\n    positionArray[i] = (Math.random() - 0.5) * 500;\n  }\n\n  particleGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positionArray, 3));\n  const particle = new THREE.Points(particleGeometry, particleMaterial);\n  scene.add(particle);\n\n  const particleAnimation = () => {\n    const elapsedTime = clock.getElapsedTime();\n    particle.rotation.y = elapsedTime * 0.0003;\n    particle.rotation.x = elapsedTime * 0.00003;\n    requestAnimationFrame(particleAnimation);\n  };\n\n  particleAnimation(); //========================\t\tOBJECTS\t(END)\t\t========================\n  //========================\t\tLIGHTS (START)\t \t=========================\n\n  const firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\n  firstLight.position.set(-9.5, 3, 4);\n  scene.add(firstLight);\n  const firstLightHelper = new THREE.PointLightHelper(firstLight);\n  scene.add(firstLightHelper); //const color = { color: \"#00ff00\" };\n  // gui.current.addColor(color, \"color\").onChange(() => {\n  // \tfirstLight.color.set(color.color);\n  // });\n  // gui.current.add(firstLight.position, \"x\");\n  // gui.current.add(firstLight.position, \"y\");\n  // gui.current.add(firstLight.position, \"z\");\n  //========================\t\tLIGHTS (END)\t\t\t========================\n  //========================\t\tUSE EFFECT (START)\t \t========================\n  //Update the dimensions of the Renderer\n\n  const updateWindowDimensions = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / initialHeight));\n    camera.updateProjectionMatrix();\n    camera.lookAt(scene.position);\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  const animateTerrain = event => {\n    mouseY = event.clientY;\n    mouseX = event.clientX;\n  }; //Update elements as the Size of Window changes\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    window.addEventListener(\"mousemove\", animateTerrain);\n  }); //Initialize the Renderer\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          ref: appDiv\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/Portfolio\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Portfolio, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/About\",\n        children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/Contact-Information\",\n        children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"ZaLK7rt4li/0i57r6paTYdca43s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/App.tsx"],"names":["React","useEffect","useRef","useCallback","THREE","BrowserRouter","Router","Route","Switch","Header","Portfolio","rockImage","rockHeightImage","alphaImage","App","mouseY","mouseX","loader","TextureLoader","rockTexture","load","rockHeight","rockAlpha","initialWidth","window","innerWidth","initialHeight","innerHeight","gridHelper","GridHelper","scene","Scene","camera","PerspectiveCamera","position","z","tanFOV","Math","tan","PI","fov","clock","Clock","renderer","WebGL1Renderer","alpha","appDiv","div","canvas","document","getElementById","guiDiv","getElementsByClassName","length","i","remove","current","setSize","domElement","id","appendChild","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","animateCube","requestAnimationFrame","rotation","x","y","render","xGeometry","PlaneBufferGeometry","xMaterial","MeshStandardMaterial","map","displacementMap","displacementScale","alphaMap","transparent","depthTest","xMesh","set","tick","elapsedTime","getElapsedTime","sphereGeometry","TorusGeometry","sphereMaterial","PointsMaterial","size","sphere","Points","sphereAnimation","particleGeometry","BufferGeometry","particleMaterial","particleNum","positionArray","Float32Array","random","setAttribute","BufferAttribute","particle","add","particleAnimation","firstLight","PointLight","firstLightHelper","PointLightHelper","updateWindowDimensions","aspect","atan","updateProjectionMatrix","lookAt","animateTerrain","event","clientY","clientX","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport * as dat from \"dat.gui\";\r\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\n\r\n//Local Components\r\nimport Header from \"./Header/Header\";\r\nimport Portfolio from \"./Portfolio/Portfolio\";\r\n//Textures\r\nimport rockImage from \"./Textures/rockTexture.jpg\";\r\nimport rockHeightImage from \"./Textures/height.png\";\r\nimport alphaImage from \"./Textures/alpha.png\";\r\n//Styles\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\tlet mouseY = 0;\r\n\tlet mouseX = 0;\r\n\t//Texture Loader\r\n\tconst loader = new THREE.TextureLoader();\r\n\tconst rockTexture = loader.load(rockImage);\r\n\tconst rockHeight = loader.load(rockHeightImage);\r\n\tconst rockAlpha = loader.load(alphaImage);\r\n\t//Window Information\r\n\tconst initialWidth = window.innerWidth;\r\n\tconst initialHeight = window.innerHeight;\r\n\r\n\t//Debug\r\n\tconst gridHelper = new THREE.GridHelper(window.innerWidth, 10);\r\n\r\n\t//let gui = useRef(new dat.GUI());\r\n\r\n\t//Three Initialization\r\n\tconst scene = new THREE.Scene();\r\n\tconst camera = new THREE.PerspectiveCamera(\r\n\t\t90,\r\n\t\tinitialWidth / initialHeight,\r\n\t\t0.1,\r\n\t\t150\r\n\t);\r\n\tcamera.position.z = 10;\r\n\tlet tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\r\n\r\n\tconst clock = new THREE.Clock();\r\n\tconst renderer = useRef(new THREE.WebGL1Renderer({ alpha: true }));\r\n\r\n\t//Add to Scene\r\n\t//scene.add(gridHelper);\r\n\r\n\tconst appDiv = useCallback(\r\n\t\t//Surround the canvas inside div\r\n\t\t(div: HTMLDivElement) => {\r\n\t\t\tif (div == null) return;\r\n\t\t\tconst canvas = document.getElementById(\"city-canvas\");\r\n\t\t\tconst guiDiv = document.getElementsByClassName(\"dg main a\");\r\n\t\t\tif (guiDiv.length > 1) {\r\n\t\t\t\tfor (var i: number = 0; i < guiDiv.length; i++) {\r\n\t\t\t\t\tif (i !== 1) guiDiv[i].remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcanvas?.remove();\r\n\t\t\t//guiDiv?.remove();\r\n\t\t\t//guiDivPlane?.remove();\r\n\r\n\t\t\trenderer.current.setSize(initialWidth, initialHeight); //Build Renderers\r\n\t\t\trenderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\r\n\t\t\tdiv.appendChild(renderer.current.domElement);\r\n\t\t},\r\n\t\t[renderer]\r\n\t);\r\n\t//========================\t\tOBJECTS\t(START)\t\t=========================\r\n\r\n\t//========= Cube\r\n\tconst cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\r\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\r\n\tconst cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\r\n\t//scene.add(cube); //Add cube to the scene\r\n\t//Animation and Rendering  of the Cube\r\n\tconst animateCube = () => {\r\n\t\trequestAnimationFrame(animateCube);\r\n\t\tcube.rotation.x += 0.01;\r\n\t\tcube.rotation.y += 0.01;\r\n\t\trenderer.current.render(scene, camera);\r\n\t};\r\n\tanimateCube();\r\n\r\n\t//=========\tPlane\r\n\tconst xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\r\n\tconst xMaterial = new THREE.MeshStandardMaterial({\r\n\t\tcolor: \"white\",\r\n\t\tmap: rockTexture,\r\n\t\tdisplacementMap: rockHeight,\r\n\t\tdisplacementScale: 3.5,\r\n\t\talphaMap: rockAlpha,\r\n\t\ttransparent: true,\r\n\t\tdepthTest: false,\r\n\t});\r\n\tconst xMesh = new THREE.Mesh(xGeometry, xMaterial);\r\n\txMesh.rotation.x = 30;\r\n\txMesh.position.set(0, -2, 1);\r\n\t//scene.add(xMesh);\r\n\t//gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\r\n\r\n\tconst tick = () => {\r\n\t\tconst elapsedTime = clock.getElapsedTime();\r\n\t\txMesh.rotation.z = 0.08 * elapsedTime;\r\n\t\t//\txMesh.material.displacementScale = mouseY * 0.005;\r\n\t\twindow.requestAnimationFrame(tick);\r\n\t};\r\n\ttick();\r\n\r\n\t//=========\tSphere\r\n\tconst sphereGeometry = new THREE.TorusGeometry(6, 1.5, 15, 100);\r\n\tconst sphereMaterial = new THREE.PointsMaterial({\r\n\t\tsize: 0.00005,\r\n\t});\r\n\tconst sphere = new THREE.Points(sphereGeometry, sphereMaterial);\r\n\t//scene.add(sphere);\r\n\r\n\tconst sphereAnimation = () => {\r\n\t\tconst elapsedTime = clock.getElapsedTime();\r\n\t\tsphere.rotation.y = 0.3 * elapsedTime;\r\n\t\trenderer.current.render(scene, camera);\r\n\t\trequestAnimationFrame(sphereAnimation);\r\n\t};\r\n\t//sphereAnimation();\r\n\r\n\t//========= Particles\r\n\tconst particleGeometry = new THREE.BufferGeometry();\r\n\tconst particleMaterial = new THREE.PointsMaterial({\r\n\t\tsize: 0.00005,\r\n\t});\r\n\tconst particleNum = 9000;\r\n\tconst positionArray = new Float32Array(particleNum * 3);\r\n\tfor (let i = 0; i < positionArray.length - 1; i++) {\r\n\t\tpositionArray[i] = (Math.random() - 0.5) * 500;\r\n\t}\r\n\tparticleGeometry.setAttribute(\r\n\t\t\"position\",\r\n\t\tnew THREE.BufferAttribute(positionArray, 3)\r\n\t);\r\n\tconst particle = new THREE.Points(particleGeometry, particleMaterial);\r\n\tscene.add(particle);\r\n\r\n\tconst particleAnimation = () => {\r\n\t\tconst elapsedTime = clock.getElapsedTime();\r\n\t\tparticle.rotation.y = elapsedTime * 0.0003;\r\n\t\tparticle.rotation.x = elapsedTime * 0.00003;\r\n\t\trequestAnimationFrame(particleAnimation);\r\n\t};\r\n\tparticleAnimation();\r\n\t//========================\t\tOBJECTS\t(END)\t\t========================\r\n\r\n\t//========================\t\tLIGHTS (START)\t \t=========================\r\n\tconst firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\r\n\tfirstLight.position.set(-9.5, 3, 4);\r\n\tscene.add(firstLight);\r\n\tconst firstLightHelper = new THREE.PointLightHelper(firstLight);\r\n\tscene.add(firstLightHelper);\r\n\r\n\t//const color = { color: \"#00ff00\" };\r\n\t// gui.current.addColor(color, \"color\").onChange(() => {\r\n\t// \tfirstLight.color.set(color.color);\r\n\t// });\r\n\t// gui.current.add(firstLight.position, \"x\");\r\n\t// gui.current.add(firstLight.position, \"y\");\r\n\t// gui.current.add(firstLight.position, \"z\");\r\n\r\n\t//========================\t\tLIGHTS (END)\t\t\t========================\r\n\r\n\t//========================\t\tUSE EFFECT (START)\t \t========================\r\n\t//Update the dimensions of the Renderer\r\n\tconst updateWindowDimensions = () => {\r\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\t\tcamera.fov =\r\n\t\t\t(360 / Math.PI) *\r\n\t\t\tMath.atan(tanFOV * (window.innerHeight / initialHeight));\r\n\t\tcamera.updateProjectionMatrix();\r\n\t\tcamera.lookAt(scene.position);\r\n\t\trenderer.current.setSize(window.innerWidth, window.innerHeight);\r\n\t};\r\n\r\n\tconst animateTerrain = (event: MouseEvent) => {\r\n\t\tmouseY = event.clientY;\r\n\t\tmouseX = event.clientX;\r\n\t};\r\n\r\n\t//Update elements as the Size of Window changes\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\r\n\t\twindow.addEventListener(\"mousemove\", animateTerrain);\r\n\t});\r\n\t//Initialize the Renderer\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path='/'>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<div className='App' ref={appDiv} />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path='/Portfolio'>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<Portfolio />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path='/About'>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path='/Contact-Information'>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}