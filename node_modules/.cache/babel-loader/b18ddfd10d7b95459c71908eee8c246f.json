{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\"; //Local Components\n\n//Textures\nimport rockImage from \"./Textures/rockTexture.jpg\"; //Styles\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Texture Loader\n  const loader = new THREE.TextureLoader();\n  const rockTexture = loader.load(rockImage); //Window Information\n\n  const initialWidth = window.innerWidth;\n  const initialHeight = window.innerHeight; //Debug\n\n  let gui = useRef(new dat.GUI()); //Three Initialization\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, initialWidth / initialHeight, 0.1, 150);\n  camera.position.z = 10;\n  let tanFOV = Math.tan(Math.PI / 180 * camera.fov / 2);\n  const renderer = useRef(new THREE.WebGL1Renderer());\n  const appDiv = useCallback( //Surround the canvas inside div\n  div => {\n    if (div == null) return;\n    const canvas = document.getElementById(\"city-canvas\");\n    const guiDiv = document.getElementsByClassName(\"dg main a\");\n\n    if (guiDiv.length > 1) {\n      for (var i = 0; i < guiDiv.length; i++) {\n        if (i !== 1) guiDiv[i].remove();\n      }\n    }\n\n    canvas === null || canvas === void 0 ? void 0 : canvas.remove();\n    console.log(guiDiv); //guiDiv?.remove();\n    //guiDivPlane?.remove();\n\n    renderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\n    renderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\n    div.appendChild(renderer.current.domElement);\n  }, [renderer]); //========================\t\tOBJECTS\t(START)\t\t=========================\n  //Cube\n\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); //Material\n\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n  //scene.add(cube); //Add cube to the scene\n  //Animation and Rendering  of the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.current.render(scene, camera);\n  };\n\n  animateCube(); //Object x\n\n  const xGeometry = new THREE.PlaneBufferGeometry(3, 3, 64, 64);\n  const xMaterial = new THREE.MeshStandardMaterial({\n    color: \"white\"\n  });\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\n  xMesh.rotation.x = 181;\n  scene.add(xMesh);\n  gui.current.add(xMesh.rotation, \"x\").min(0).max(200); //========================\t\tOBJECTS\t(END)\t\t========================\n  //========================\t\tLIGHTS (START)\t \t=========================\n\n  const firstLight = new THREE.PointLight(0x42a5f5, 1, 100);\n  firstLight.position.set(2, 3, 4);\n  scene.add(firstLight);\n  const firstLightHelper = new THREE.PointLightHelper(firstLight);\n  scene.add(firstLightHelper);\n  const color = {\n    color: \"#00ff00\"\n  };\n  gui.current.addColor(color, \"color\").onChange(() => {\n    firstLight.color.set(color.color);\n  });\n  gui.current.add(firstLight.position, \"x\");\n  gui.current.add(firstLight.position, \"y\");\n  gui.current.add(firstLight.position, \"z\"); //========================\t\tLIGHTS (END)\t\t\t========================\n  //========================\t\tUSE EFFECT (START)\t \t========================\n  //Update the dimensions of the Renderer\n\n  const updateWindowDimensions = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / initialHeight));\n    camera.updateProjectionMatrix();\n    camera.lookAt(scene.position);\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\n  }; //Update elements as the Size of Window changess\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n  }); //Initialize the Renderer\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appDiv\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"d1f5cWpY27k5ele7+oFeH+6opPA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/App.tsx"],"names":["React","useEffect","useRef","useCallback","THREE","dat","rockImage","App","loader","TextureLoader","rockTexture","load","initialWidth","window","innerWidth","initialHeight","innerHeight","gui","GUI","scene","Scene","camera","PerspectiveCamera","position","z","tanFOV","Math","tan","PI","fov","renderer","WebGL1Renderer","appDiv","div","canvas","document","getElementById","guiDiv","getElementsByClassName","length","i","remove","console","log","current","setSize","domElement","id","appendChild","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","animateCube","requestAnimationFrame","rotation","x","y","render","xGeometry","PlaneBufferGeometry","xMaterial","MeshStandardMaterial","xMesh","add","min","max","firstLight","PointLight","set","firstLightHelper","PointLightHelper","addColor","onChange","updateWindowDimensions","aspect","atan","updateProjectionMatrix","lookAt","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n//Local Components\nimport Header from \"./Header/Header\";\n//Textures\nimport rockImage from \"./Textures/rockTexture.jpg\";\n//Styles\nimport \"./App.css\";\n\nconst App = () => {\n\t//Texture Loader\n\tconst loader = new THREE.TextureLoader();\n\tconst rockTexture = loader.load(rockImage);\n\n\t//Window Information\n\tconst initialWidth = window.innerWidth;\n\tconst initialHeight = window.innerHeight;\n\n\t//Debug\n\tlet gui = useRef(new dat.GUI());\n\n\t//Three Initialization\n\tconst scene = new THREE.Scene();\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\tinitialWidth / initialHeight,\n\t\t0.1,\n\t\t150\n\t);\n\tcamera.position.z = 10;\n\tlet tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\n\n\tconst renderer = useRef(new THREE.WebGL1Renderer());\n\n\tconst appDiv = useCallback(\n\t\t//Surround the canvas inside div\n\t\t(div: HTMLDivElement) => {\n\t\t\tif (div == null) return;\n\t\t\tconst canvas = document.getElementById(\"city-canvas\");\n\t\t\tconst guiDiv = document.getElementsByClassName(\"dg main a\");\n\t\t\tif (guiDiv.length > 1) {\n\t\t\t\tfor (var i: number = 0; i < guiDiv.length; i++) {\n\t\t\t\t\tif (i !== 1) guiDiv[i].remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvas?.remove();\n\t\t\tconsole.log(guiDiv);\n\t\t\t//guiDiv?.remove();\n\t\t\t//guiDivPlane?.remove();\n\n\t\t\trenderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\t\t\trenderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\t\t\tdiv.appendChild(renderer.current.domElement);\n\t\t},\n\t\t[renderer]\n\t);\n\t//========================\t\tOBJECTS\t(START)\t\t=========================\n\n\t//Cube\n\tconst cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\n\tconst cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n\t//scene.add(cube); //Add cube to the scene\n\t//Animation and Rendering  of the Cube\n\tconst animateCube = () => {\n\t\trequestAnimationFrame(animateCube);\n\t\tcube.rotation.x += 0.01;\n\t\tcube.rotation.y += 0.01;\n\t\trenderer.current.render(scene, camera);\n\t};\n\tanimateCube();\n\n\t//Object x\n\tconst xGeometry = new THREE.PlaneBufferGeometry(3, 3, 64, 64);\n\tconst xMaterial = new THREE.MeshStandardMaterial({ color: \"white\" });\n\tconst xMesh = new THREE.Mesh(xGeometry, xMaterial);\n\txMesh.rotation.x = 181;\n\tscene.add(xMesh);\n\tgui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n\t//========================\t\tOBJECTS\t(END)\t\t========================\n\n\t//========================\t\tLIGHTS (START)\t \t=========================\n\tconst firstLight = new THREE.PointLight(0x42a5f5, 1, 100);\n\tfirstLight.position.set(2, 3, 4);\n\tscene.add(firstLight);\n\tconst firstLightHelper = new THREE.PointLightHelper(firstLight);\n\tscene.add(firstLightHelper);\n\n\tconst color = { color: \"#00ff00\" };\n\tgui.current.addColor(color, \"color\").onChange(() => {\n\t\tfirstLight.color.set(color.color);\n\t});\n\tgui.current.add(firstLight.position, \"x\");\n\tgui.current.add(firstLight.position, \"y\");\n\tgui.current.add(firstLight.position, \"z\");\n\n\t//========================\t\tLIGHTS (END)\t\t\t========================\n\n\t//========================\t\tUSE EFFECT (START)\t \t========================\n\t//Update the dimensions of the Renderer\n\tconst updateWindowDimensions = () => {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.fov =\n\t\t\t(360 / Math.PI) *\n\t\t\tMath.atan(tanFOV * (window.innerHeight / initialHeight));\n\t\tcamera.updateProjectionMatrix();\n\t\tcamera.lookAt(scene.position);\n\t\trenderer.current.setSize(window.innerWidth, window.innerHeight);\n\t};\n\n\t//Update elements as the Size of Window changess\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\n\t});\n\t//Initialize the Renderer\n\n\treturn (\n\t\t<div className='App' ref={appDiv}>\n\t\t\t{/* <Header /> */}\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}