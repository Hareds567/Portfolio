{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport isViablePhoneNumber from './helpers/isViablePhoneNumber';\nimport _getNumberType from './helpers/getNumberType';\nimport parse from './parse_'; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _getNumberType(input, options, metadata);\n} // Sort out arguments\n\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var input;\n  var options = {};\n  var metadata; // If the phone number is passed as a string.\n  // `getNumberType('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If \"default country\" argument is being passed\n    // then convert it to an `options` object.\n    // `getNumberType('88005553535', 'RU', metadata)`.\n    if (_typeof(arg_2) !== 'object') {\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      } // `parse` extracts phone numbers from raw text,\n      // therefore it will cut off all \"garbage\" characters,\n      // while this `validate` function needs to verify\n      // that the phone number contains no \"garbage\"\n      // therefore the explicit `isViablePhoneNumber` check.\n\n\n      if (isViablePhoneNumber(arg_1)) {\n        input = parse(arg_1, {\n          defaultCountry: arg_2\n        }, metadata);\n      } else {\n        input = {};\n      }\n    } // No \"resrict country\" argument is being passed.\n    // International phone number is passed.\n    // `getNumberType('+78005553535', metadata)`.\n    else {\n        if (arg_3) {\n          options = arg_2;\n          metadata = arg_3;\n        } else {\n          metadata = arg_2;\n        } // `parse` extracts phone numbers from raw text,\n        // therefore it will cut off all \"garbage\" characters,\n        // while this `validate` function needs to verify\n        // that the phone number contains no \"garbage\"\n        // therefore the explicit `isViablePhoneNumber` check.\n\n\n        if (isViablePhoneNumber(arg_1)) {\n          input = parse(arg_1, undefined, metadata);\n        } else {\n          input = {};\n        }\n      }\n  } // If the phone number is passed as a parsed phone number.\n  // `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\n  else if (is_object(arg_1)) {\n      input = arg_1;\n\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n  return {\n    input: input,\n    options: options,\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"sources":["../source/getNumberType.js"],"names":["input","options","metadata","normalizeArguments","_getNumberType","arg_1","arg_2","arg_3","arg_4","Array","isViablePhoneNumber","parse","defaultCountry","is_object"],"mappings":"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","sourcesContent":["import isViablePhoneNumber from './helpers/isViablePhoneNumber'\r\nimport _getNumberType from './helpers/getNumberType'\r\nimport parse from './parse_'\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType()\r\n{\r\n\tconst { input, options, metadata } = normalizeArguments(arguments)\r\n\treturn _getNumberType(input, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet options = {}\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `getNumberType('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If \"default country\" argument is being passed\r\n\t\t// then convert it to an `options` object.\r\n\t\t// `getNumberType('88005553535', 'RU', metadata)`.\r\n\t\tif (typeof arg_2 !== 'object')\r\n\t\t{\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, { defaultCountry: arg_2 }, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// No \"resrict country\" argument is being passed.\r\n\t\t// International phone number is passed.\r\n\t\t// `getNumberType('+78005553535', metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (arg_3)\r\n\t\t\t{\r\n\t\t\t\toptions = arg_2\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_2\r\n\t\t\t}\r\n\r\n\t\t\t// `parse` extracts phone numbers from raw text,\r\n\t\t\t// therefore it will cut off all \"garbage\" characters,\r\n\t\t\t// while this `validate` function needs to verify\r\n\t\t\t// that the phone number contains no \"garbage\"\r\n\t\t\t// therefore the explicit `isViablePhoneNumber` check.\r\n\t\t\tif (isViablePhoneNumber(arg_1))\r\n\t\t\t{\r\n\t\t\t\tinput = parse(arg_1, undefined, metadata)\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinput = {}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed phone number.\r\n\t// `getNumberType({ phone: '88005553535', country: 'RU' }, ...)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput = arg_1\r\n\r\n\t\tif (arg_3)\r\n\t\t{\r\n\t\t\toptions = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}