{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function validatePhoneNumberLength() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread({}, options, {\n    extract: false // Parse phone number.\n\n  });\n\n  try {\n    var phoneNumber = parsePhoneNumber(text, options, metadata);\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(phoneNumber.countryCallingCode);\n    var result = checkNumberLength(phoneNumber.nationalNumber, metadata);\n\n    if (result !== 'IS_POSSIBLE') {\n      return result;\n    }\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {\n      return error.message;\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"sources":["../source/validatePhoneNumberLength.js"],"names":["text","options","metadata","normalizeArguments","extract","phoneNumber","parsePhoneNumber","result","checkNumberLength","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,oBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,iBAAA,MAAA,6BAAA;AAEA,eAAe,SAAA,yBAAA,GAAqC;AAAA,MAAA,mBAAA,GACjBG,kBAAkB,CADD,SACC,CADD;AAAA,MAC7CH,IAD6C,GAAA,mBAAA,CAAA,IAAA;AAAA,MACvCC,OADuC,GAAA,mBAAA,CAAA,OAAA;AAAA,MAC9BC,QAD8B,GAAA,mBAAA,CAAA,QAAA;;AAEnDD,EAAAA,OAAO,GAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAENG,IAAAA,OAAO,EAFD,KAAA,CAKP;;AALO,GAAA,CAAPH;;AAMA,MAAI;AACH,QAAMI,WAAW,GAAGC,gBAAgB,CAAA,IAAA,EAAA,OAAA,EAApC,QAAoC,CAApC;AACAJ,IAAAA,QAAQ,GAAG,IAAA,QAAA,CAAXA,QAAW,CAAXA;AACAA,IAAAA,QAAQ,CAARA,mBAAAA,CAA6BG,WAAW,CAAxCH,kBAAAA;AACA,QAAMK,MAAM,GAAGC,iBAAiB,CAACH,WAAW,CAAZ,cAAA,EAAhC,QAAgC,CAAhC;;AACA,QAAIE,MAAM,KAAV,aAAA,EAA8B;AAC7B,aAAA,MAAA;AACA;AAPF,GAAA,CAQE,OAAA,KAAA,EAAc;AACf;AACA,QAAIE,KAAK,YAAT,UAAA,EAAiC;AAChC,aAAOA,KAAK,CAAZ,OAAA;AADD,KAAA,MAEO;AACN,YAAA,KAAA;AACA;AACD;AACD","sourcesContent":["import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport checkNumberLength from './helpers/checkNumberLength'\r\n\r\nexport default function validatePhoneNumberLength() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\t\tconst result = checkNumberLength(phoneNumber.nationalNumber, metadata)\r\n\t\tif (result !== 'IS_POSSIBLE') {\r\n\t\t\treturn result\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\treturn error.message\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}