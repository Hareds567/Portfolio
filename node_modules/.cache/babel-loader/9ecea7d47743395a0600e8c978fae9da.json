{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\n//Local Components\nimport Header from \"./Header/Header\"; //Textures\n\nimport rockImage from \"./Textures/rockTexture.jpg\";\nimport rockHeightImage from \"./Textures/height.png\";\nimport alphaImage from \"./Textures/alpha.png\"; //Styles\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Texture Loader\n  let mouseY = 0;\n  const loader = new THREE.TextureLoader();\n  const rockTexture = loader.load(rockImage);\n  const rockHeight = loader.load(rockHeightImage);\n  const rockAlpha = loader.load(alphaImage); //Window Information\n\n  const initialWidth = window.innerWidth;\n  const initialHeight = window.innerHeight; //Debug\n\n  const gridHelper = new THREE.GridHelper(window.innerWidth, 10); //let gui = useRef(new dat.GUI());\n  //Three Initialization\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, initialWidth / initialHeight, 0.1, 150);\n  camera.position.z = 10;\n  let tanFOV = Math.tan(Math.PI / 180 * camera.fov / 2);\n  const clock = new THREE.Clock();\n  const renderer = useRef(new THREE.WebGL1Renderer()); //Add to Scene\n  //scene.add(gridHelper);\n\n  const appDiv = useCallback( //Surround the canvas inside div\n  div => {\n    if (div == null) return;\n    const canvas = document.getElementById(\"city-canvas\");\n    const guiDiv = document.getElementsByClassName(\"dg main a\");\n\n    if (guiDiv.length > 1) {\n      for (var i = 0; i < guiDiv.length; i++) {\n        if (i !== 1) guiDiv[i].remove();\n      }\n    }\n\n    canvas === null || canvas === void 0 ? void 0 : canvas.remove(); //guiDiv?.remove();\n    //guiDivPlane?.remove();\n\n    renderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\n    renderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\n    div.appendChild(renderer.current.domElement);\n  }, [renderer]); //========================\t\tOBJECTS\t(START)\t\t=========================\n  //========= Cube\n\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); //Material\n\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n  //scene.add(cube); //Add cube to the scene\n  //Animation and Rendering  of the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.current.render(scene, camera);\n  };\n\n  animateCube(); //=========\tPlane\n\n  const xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\n  const xMaterial = new THREE.MeshStandardMaterial({\n    color: \"white\",\n    map: rockTexture,\n    displacementMap: rockHeight,\n    displacementScale: 3.5,\n    alphaMap: rockAlpha,\n    transparent: true,\n    depthTest: false\n  });\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\n  xMesh.rotation.x = 30;\n  xMesh.position.set(0, -2, 1);\n  scene.add(xMesh); //gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n  const tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    xMesh.rotation.z = 0.08 * elapsedTime; //\txMesh.material.displacementScale = mouseY * 0.005;\n\n    window.requestAnimationFrame(tick);\n  };\n\n  tick(); //=========\tSphere\n\n  const sphereGeometry = new THREE.TorusGeometry(9, 0.4, 15, 100);\n  const sphereMaterial = new THREE.PointsMaterial({\n    size: 0.00005,\n    transparent: false\n  });\n  const sphere = new THREE.Points(sphereGeometry, sphereMaterial);\n  scene.add(sphere);\n\n  const sphereAnimation = () => {\n    const elapsedTime = clock.getElapsedTime();\n    sphere.rotation.z = 0.08 * elapsedTime;\n    window.requestAnimationFrame(sphereAnimation);\n  };\n\n  sphereAnimation(); //========= Particles\n\n  const particleGeometry = new THREE.BufferGeometry();\n  const particleNum = 5000;\n  const positionArray = new Float32Array(particleNum * 3);\n  positionArray.forEach(element => {\n    element = Math.random();\n  });\n  particleGeometry.setAttribute(\"position\", new THREE.BufferAttribute(positionArray, 3)); //========================\t\tOBJECTS\t(END)\t\t========================\n  //========================\t\tLIGHTS (START)\t \t=========================\n\n  const firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\n  firstLight.position.set(-9.5, 3, 4);\n  scene.add(firstLight);\n  const firstLightHelper = new THREE.PointLightHelper(firstLight);\n  scene.add(firstLightHelper);\n  const color = {\n    color: \"#00ff00\"\n  }; // gui.current.addColor(color, \"color\").onChange(() => {\n  // \tfirstLight.color.set(color.color);\n  // });\n  // gui.current.add(firstLight.position, \"x\");\n  // gui.current.add(firstLight.position, \"y\");\n  // gui.current.add(firstLight.position, \"z\");\n  //========================\t\tLIGHTS (END)\t\t\t========================\n  //========================\t\tUSE EFFECT (START)\t \t========================\n  //Update the dimensions of the Renderer\n\n  const updateWindowDimensions = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / initialHeight));\n    camera.updateProjectionMatrix();\n    camera.lookAt(scene.position);\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  const animateTerrain = event => {\n    mouseY = event.clientY;\n  }; //Update elements as the Size of Window changes\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    window.addEventListener(\"mousemove\", animateTerrain);\n  }); //Initialize the Renderer\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appDiv,\n    children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"ZaLK7rt4li/0i57r6paTYdca43s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/App.tsx"],"names":["React","useEffect","useRef","useCallback","THREE","Header","rockImage","rockHeightImage","alphaImage","App","mouseY","loader","TextureLoader","rockTexture","load","rockHeight","rockAlpha","initialWidth","window","innerWidth","initialHeight","innerHeight","gridHelper","GridHelper","scene","Scene","camera","PerspectiveCamera","position","z","tanFOV","Math","tan","PI","fov","clock","Clock","renderer","WebGL1Renderer","appDiv","div","canvas","document","getElementById","guiDiv","getElementsByClassName","length","i","remove","current","setSize","domElement","id","appendChild","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","animateCube","requestAnimationFrame","rotation","x","y","render","xGeometry","PlaneBufferGeometry","xMaterial","MeshStandardMaterial","map","displacementMap","displacementScale","alphaMap","transparent","depthTest","xMesh","set","add","tick","elapsedTime","getElapsedTime","sphereGeometry","TorusGeometry","sphereMaterial","PointsMaterial","size","sphere","Points","sphereAnimation","particleGeometry","BufferGeometry","particleNum","positionArray","Float32Array","forEach","element","random","setAttribute","BufferAttribute","firstLight","PointLight","firstLightHelper","PointLightHelper","updateWindowDimensions","aspect","atan","updateProjectionMatrix","lookAt","animateTerrain","event","clientY","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n//Local Components\nimport Header from \"./Header/Header\";\n//Textures\nimport rockImage from \"./Textures/rockTexture.jpg\";\nimport rockHeightImage from \"./Textures/height.png\";\nimport alphaImage from \"./Textures/alpha.png\";\n//Styles\nimport \"./App.css\";\n\nconst App = () => {\n\t//Texture Loader\n\tlet mouseY = 0;\n\tconst loader = new THREE.TextureLoader();\n\tconst rockTexture = loader.load(rockImage);\n\tconst rockHeight = loader.load(rockHeightImage);\n\tconst rockAlpha = loader.load(alphaImage);\n\t//Window Information\n\tconst initialWidth = window.innerWidth;\n\tconst initialHeight = window.innerHeight;\n\n\t//Debug\n\tconst gridHelper = new THREE.GridHelper(window.innerWidth, 10);\n\n\t//let gui = useRef(new dat.GUI());\n\n\t//Three Initialization\n\tconst scene = new THREE.Scene();\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\tinitialWidth / initialHeight,\n\t\t0.1,\n\t\t150\n\t);\n\tcamera.position.z = 10;\n\tlet tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\n\n\tconst clock = new THREE.Clock();\n\tconst renderer = useRef(new THREE.WebGL1Renderer());\n\n\t//Add to Scene\n\t//scene.add(gridHelper);\n\n\tconst appDiv = useCallback(\n\t\t//Surround the canvas inside div\n\t\t(div: HTMLDivElement) => {\n\t\t\tif (div == null) return;\n\t\t\tconst canvas = document.getElementById(\"city-canvas\");\n\t\t\tconst guiDiv = document.getElementsByClassName(\"dg main a\");\n\t\t\tif (guiDiv.length > 1) {\n\t\t\t\tfor (var i: number = 0; i < guiDiv.length; i++) {\n\t\t\t\t\tif (i !== 1) guiDiv[i].remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\tcanvas?.remove();\n\t\t\t//guiDiv?.remove();\n\t\t\t//guiDivPlane?.remove();\n\n\t\t\trenderer.current.setSize(initialWidth, initialHeight); //Build Renderers\n\t\t\trenderer.current.domElement.id = \"city-canvas\"; //Add Rendered inside\n\t\t\tdiv.appendChild(renderer.current.domElement);\n\t\t},\n\t\t[renderer]\n\t);\n\t//========================\t\tOBJECTS\t(START)\t\t=========================\n\n\t//========= Cube\n\tconst cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\n\tconst cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n\t//scene.add(cube); //Add cube to the scene\n\t//Animation and Rendering  of the Cube\n\tconst animateCube = () => {\n\t\trequestAnimationFrame(animateCube);\n\t\tcube.rotation.x += 0.01;\n\t\tcube.rotation.y += 0.01;\n\t\trenderer.current.render(scene, camera);\n\t};\n\tanimateCube();\n\n\t//=========\tPlane\n\tconst xGeometry = new THREE.PlaneBufferGeometry(20, 20, 64, 64);\n\tconst xMaterial = new THREE.MeshStandardMaterial({\n\t\tcolor: \"white\",\n\t\tmap: rockTexture,\n\t\tdisplacementMap: rockHeight,\n\t\tdisplacementScale: 3.5,\n\t\talphaMap: rockAlpha,\n\t\ttransparent: true,\n\t\tdepthTest: false,\n\t});\n\tconst xMesh = new THREE.Mesh(xGeometry, xMaterial);\n\txMesh.rotation.x = 30;\n\txMesh.position.set(0, -2, 1);\n\tscene.add(xMesh);\n\t//gui.current.add(xMesh.rotation, \"x\").min(0).max(200);\n\n\tconst tick = () => {\n\t\tconst elapsedTime = clock.getElapsedTime();\n\t\txMesh.rotation.z = 0.08 * elapsedTime;\n\t\t//\txMesh.material.displacementScale = mouseY * 0.005;\n\t\twindow.requestAnimationFrame(tick);\n\t};\n\ttick();\n\n\t//=========\tSphere\n\tconst sphereGeometry = new THREE.TorusGeometry(9, 0.4, 15, 100);\n\tconst sphereMaterial = new THREE.PointsMaterial({\n\t\tsize: 0.00005,\n\t\ttransparent: false,\n\t});\n\tconst sphere = new THREE.Points(sphereGeometry, sphereMaterial);\n\tscene.add(sphere);\n\n\tconst sphereAnimation = () => {\n\t\tconst elapsedTime = clock.getElapsedTime();\n\t\tsphere.rotation.z = 0.08 * elapsedTime;\n\t\twindow.requestAnimationFrame(sphereAnimation);\n\t};\n\tsphereAnimation();\n\n\t//========= Particles\n\tconst particleGeometry = new THREE.BufferGeometry();\n\tconst particleNum = 5000;\n\tconst positionArray = new Float32Array(particleNum * 3);\n\tpositionArray.forEach((element) => {\n\t\telement = Math.random();\n\t});\n\tparticleGeometry.setAttribute(\n\t\t\"position\",\n\t\tnew THREE.BufferAttribute(positionArray, 3)\n\t);\n\n\t//========================\t\tOBJECTS\t(END)\t\t========================\n\n\t//========================\t\tLIGHTS (START)\t \t=========================\n\tconst firstLight = new THREE.PointLight(\"#ffffff\", 1.5, 100);\n\tfirstLight.position.set(-9.5, 3, 4);\n\tscene.add(firstLight);\n\tconst firstLightHelper = new THREE.PointLightHelper(firstLight);\n\tscene.add(firstLightHelper);\n\n\tconst color = { color: \"#00ff00\" };\n\t// gui.current.addColor(color, \"color\").onChange(() => {\n\t// \tfirstLight.color.set(color.color);\n\t// });\n\t// gui.current.add(firstLight.position, \"x\");\n\t// gui.current.add(firstLight.position, \"y\");\n\t// gui.current.add(firstLight.position, \"z\");\n\n\t//========================\t\tLIGHTS (END)\t\t\t========================\n\n\t//========================\t\tUSE EFFECT (START)\t \t========================\n\t//Update the dimensions of the Renderer\n\tconst updateWindowDimensions = () => {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.fov =\n\t\t\t(360 / Math.PI) *\n\t\t\tMath.atan(tanFOV * (window.innerHeight / initialHeight));\n\t\tcamera.updateProjectionMatrix();\n\t\tcamera.lookAt(scene.position);\n\t\trenderer.current.setSize(window.innerWidth, window.innerHeight);\n\t};\n\n\tconst animateTerrain = (event: MouseEvent) => {\n\t\tmouseY = event.clientY;\n\t};\n\n\t//Update elements as the Size of Window changes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\n\t\twindow.addEventListener(\"mousemove\", animateTerrain);\n\t});\n\t//Initialize the Renderer\n\n\treturn (\n\t\t<div className='App' ref={appDiv}>\n\t\t\t<Header />\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}