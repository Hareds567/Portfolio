{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport _formatNumber from './format_';\nimport parse from './parse_';\nexport default function formatNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      input = _normalizeArguments.input,\n      format = _normalizeArguments.format,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _formatNumber(input, format, options, metadata);\n} // Sort out arguments\n\nfunction normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 5),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3],\n      arg_5 = _Array$prototype$slic2[4];\n\n  var input;\n  var format;\n  var options;\n  var metadata; // Sort out arguments.\n  // If the phone number is passed as a string.\n  // `format('8005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If country code is supplied.\n    // `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n    if (typeof arg_3 === 'string') {\n      format = arg_3;\n\n      if (arg_5) {\n        options = arg_4;\n        metadata = arg_5;\n      } else {\n        metadata = arg_4;\n      }\n\n      input = parse(arg_1, {\n        defaultCountry: arg_2,\n        extended: true\n      }, metadata);\n    } // Just an international phone number is supplied\n    // `format('+78005553535', 'NATIONAL', [options], metadata)`.\n    else {\n        if (typeof arg_2 !== 'string') {\n          throw new Error('`format` argument not passed to `formatNumber(number, format)`');\n        }\n\n        format = arg_2;\n\n        if (arg_4) {\n          options = arg_3;\n          metadata = arg_4;\n        } else {\n          metadata = arg_3;\n        }\n\n        input = parse(arg_1, {\n          extended: true\n        }, metadata);\n      }\n  } // If the phone number is passed as a parsed number object.\n  // `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n  else if (is_object(arg_1)) {\n      input = arg_1;\n      format = arg_2;\n\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      }\n    } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.'); // Legacy lowercase formats.\n\n\n  if (format === 'International') {\n    format = 'INTERNATIONAL';\n  } else if (format === 'National') {\n    format = 'NATIONAL';\n  }\n\n  return {\n    input: input,\n    format: format,\n    options: options,\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};","map":{"version":3,"sources":["../source/format.js"],"names":["input","format","options","metadata","normalizeArguments","_formatNumber","arg_1","arg_2","arg_3","arg_4","arg_5","Array","parse","defaultCountry","extended","is_object"],"mappings":"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","sourcesContent":["import _formatNumber from './format_'\r\nimport parse from './parse_'\r\n\r\nexport default function formatNumber()\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= normalizeArguments(arguments)\r\n\r\n\treturn _formatNumber(input, format, options, metadata)\r\n}\r\n\r\n// Sort out arguments\r\nfunction normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4, arg_5] = Array.prototype.slice.call(args)\r\n\r\n\tlet input\r\n\tlet format\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput  = arg_1\r\n\t\tformat = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Legacy lowercase formats.\r\n\tif (format === 'International') {\r\n\t\tformat = 'INTERNATIONAL'\r\n\t} else if (format === 'National') {\r\n\t\tformat = 'NATIONAL'\r\n\t}\r\n\r\n\treturn {\r\n\t\tinput,\r\n\t\tformat,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'"]},"metadata":{},"sourceType":"module"}