{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Projects\\\\Portfolio\\\\portfolio\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\"; //Local Components\n\nimport Header from \"./Header/Header\"; //Styles\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Window Information\n  const initialWidth = window.innerWidth;\n  const initialHeight = window.innerHeight; //Debug\n\n  const gui = new dat.GUI(); //Three Initialization\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(90, initialWidth / initialHeight, 0.1, 150);\n  camera.position.z = 10;\n  var tanFOV = Math.tan(Math.PI / 180 * camera.fov / 2);\n  const renderer = useRef(new THREE.WebGL1Renderer());\n  const appDiv = useCallback( //Surround the canvas inside div\n  div => {\n    if (div == null) return;\n    const canvas = document.getElementById(\"city-canvas\");\n    canvas === null || canvas === void 0 ? void 0 : canvas.remove();\n    renderer.current.setSize(initialWidth, initialHeight);\n    renderer.current.domElement.id = \"city-canvas\";\n    div.appendChild(renderer.current.domElement);\n  }, [renderer]); //========================\t\tOBJECTS\t(START)\t\t========================\n  //Cube\n\n  const cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\n  const material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  }); //Material\n\n  const cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n\n  scene.add(cube); //Add cube to the scene\n  //Animation and Rendering  of the Cube\n\n  const animateCube = () => {\n    requestAnimationFrame(animateCube);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.current.render(scene, camera);\n  };\n\n  animateCube(); //Object x\n\n  const xGeometry = new THREE.PlaneBufferGeometry(3, 3, 64, 64);\n  const xMaterial = new THREE.MeshStandardMaterial({\n    color: \"white\"\n  });\n  const xMesh = new THREE.Mesh(xGeometry, xMaterial);\n  scene.add(xMesh);\n  gui.add(xMesh.rotation, \"x\"); //========================\t\tOBJECTS\t(END)\t\t========================\n  //========================\t\tLIGHTS (START)\t \t========================\n\n  const firstLight = new THREE.PointLight(0x42a5f5, 2, 100);\n  firstLight.position.set(2, 3, 4);\n  scene.add(firstLight); //========================\t\tLIGHTS (END)\t\t\t========================\n  //========================\t\tUSE EFFECT (START)\t \t========================\n  //Update the dimensions of the Renderer\n\n  const updateWindowDimensions = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / initialHeight));\n    camera.updateProjectionMatrix();\n    camera.lookAt(scene.position);\n    renderer.current.setSize(window.innerWidth, window.innerHeight);\n  }; //Update elements as the Size of Window changes\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n  }); //Initialize the Renderer\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appDiv,\n    children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"ZaLK7rt4li/0i57r6paTYdca43s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/justi/Projects/Portfolio/portfolio/src/App.tsx"],"names":["React","useEffect","useRef","useCallback","THREE","dat","Header","App","initialWidth","window","innerWidth","initialHeight","innerHeight","gui","GUI","scene","Scene","camera","PerspectiveCamera","position","z","tanFOV","Math","tan","PI","fov","renderer","WebGL1Renderer","appDiv","div","canvas","document","getElementById","remove","current","setSize","domElement","id","appendChild","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","animateCube","requestAnimationFrame","rotation","x","y","render","xGeometry","PlaneBufferGeometry","xMaterial","MeshStandardMaterial","xMesh","firstLight","PointLight","set","updateWindowDimensions","aspect","atan","updateProjectionMatrix","lookAt","addEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useCallback } from \"react\";\nimport * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n//Local Components\nimport Header from \"./Header/Header\";\n//Styles\nimport \"./App.css\";\n\nconst App = () => {\n\t//Window Information\n\tconst initialWidth = window.innerWidth;\n\tconst initialHeight = window.innerHeight;\n\n\t//Debug\n\tconst gui = new dat.GUI();\n\n\t//Three Initialization\n\tconst scene = new THREE.Scene();\n\tconst camera = new THREE.PerspectiveCamera(\n\t\t90,\n\t\tinitialWidth / initialHeight,\n\t\t0.1,\n\t\t150\n\t);\n\tcamera.position.z = 10;\n\tvar tanFOV = Math.tan(((Math.PI / 180) * camera.fov) / 2);\n\tconst renderer = useRef(new THREE.WebGL1Renderer());\n\n\tconst appDiv = useCallback(\n\t\t//Surround the canvas inside div\n\t\t(div: HTMLDivElement) => {\n\t\t\tif (div == null) return;\n\t\t\tconst canvas = document.getElementById(\"city-canvas\");\n\t\t\tcanvas?.remove();\n\t\t\trenderer.current.setSize(initialWidth, initialHeight);\n\t\t\trenderer.current.domElement.id = \"city-canvas\";\n\t\t\tdiv.appendChild(renderer.current.domElement);\n\t\t},\n\t\t[renderer]\n\t);\n\t//========================\t\tOBJECTS\t(START)\t\t========================\n\n\t//Cube\n\tconst cubeGeometry = new THREE.BoxGeometry(2, 2, 2); //Object\n\tconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 }); //Material\n\tconst cube = new THREE.Mesh(cubeGeometry, material); //Create Mesh\n\tscene.add(cube); //Add cube to the scene\n\t//Animation and Rendering  of the Cube\n\tconst animateCube = () => {\n\t\trequestAnimationFrame(animateCube);\n\t\tcube.rotation.x += 0.01;\n\t\tcube.rotation.y += 0.01;\n\t\trenderer.current.render(scene, camera);\n\t};\n\tanimateCube();\n\n\t//Object x\n\tconst xGeometry = new THREE.PlaneBufferGeometry(3, 3, 64, 64);\n\tconst xMaterial = new THREE.MeshStandardMaterial({ color: \"white\" });\n\tconst xMesh = new THREE.Mesh(xGeometry, xMaterial);\n\tscene.add(xMesh);\n\tgui.add(xMesh.rotation, \"x\");\n\t//========================\t\tOBJECTS\t(END)\t\t========================\n\n\t//========================\t\tLIGHTS (START)\t \t========================\n\tconst firstLight = new THREE.PointLight(0x42a5f5, 2, 100);\n\tfirstLight.position.set(2, 3, 4);\n\tscene.add(firstLight);\n\n\t//========================\t\tLIGHTS (END)\t\t\t========================\n\n\t//========================\t\tUSE EFFECT (START)\t \t========================\n\t//Update the dimensions of the Renderer\n\tconst updateWindowDimensions = () => {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.fov =\n\t\t\t(360 / Math.PI) *\n\t\t\tMath.atan(tanFOV * (window.innerHeight / initialHeight));\n\t\tcamera.updateProjectionMatrix();\n\t\tcamera.lookAt(scene.position);\n\t\trenderer.current.setSize(window.innerWidth, window.innerHeight);\n\t};\n\n\t//Update elements as the Size of Window changes\n\tuseEffect(() => {\n\t\twindow.addEventListener(\"resize\", updateWindowDimensions);\n\t});\n\t//Initialize the Renderer\n\n\treturn (\n\t\t<div className='App' ref={appDiv}>\n\t\t\t<Header />\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}